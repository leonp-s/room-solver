{"version":3,"sources":["utilities/RoomData.js","utilities/RoomSolver.js","components/LineGraph.js","components/RoomInputGrid.js","components/MaterialsGrid.js","App.js","serviceWorker.js","index.js"],"names":["RoomData","RT60","volume","surfaceAbsorbtion","SurfaceAbsorption","surfaces","frequency","A","forEach","element","roomElement","Material","parseInt","Area","RoomAnalysis","analysis","Object","keys","push","LineGraph","props","data","React","useMemo","label","RoomSolver","plot","axes","primary","type","position","style","width","height","tooltip","RoomInputGrid","useState","resolve","tableData","setTableData","useEffect","updatePlot","options","search","columns","title","field","editable","onRowAdd","newData","Promise","reject","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","MaterialsGrid","App","initialData","plotData","setPlot","Grid","container","spacing","justify","item","xs","align","Paper","Typography","variant","component","TextField","id","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e614246b.chunk.js","sourcesContent":["const RoomData = [{\n        \"Material\": \"Brick\",\n        \"125\": 0.05,\n        \"250\": 0.04,\n        \"500\": 0.02,\n        \"1000\": 0.04,\n        \"2000\": 0.05,\n        \"4000\": 0.05\n    },\n    {\n        \"Material\": \"Concrete\",\n        \"125\": 0.02,\n        \"250\": 0.02,\n        \"500\": 0.02,\n        \"1000\": 0.04,\n        \"2000\": 0.05,\n        \"4000\": 0.05\n    },\n    {\n        \"Material\": \"Drapes\",\n        \"125\": 0.14,\n        \"250\": 0.35,\n        \"500\": 0.55,\n        \"1000\": 0.72,\n        \"2000\": 0.7,\n        \"4000\": 0.65\n    },\n    {\n        \"Material\": \"Plaster\",\n        \"125\": 0.14,\n        \"250\": 0.1,\n        \"500\": 0.06,\n        \"1000\": 0.05,\n        \"2000\": 0.04,\n        \"4000\": 0.03\n    },\n    {\n        \"Material\": \"Plywood\",\n        \"125\": 0.28,\n        \"250\": 0.22,\n        \"500\": 0.17,\n        \"1000\": 0.09,\n        \"2000\": 0.1,\n        \"4000\": 0.11\n    },\n    {\n        \"Material\": \"Air\",\n        \"125\": 0,\n        \"250\": 0,\n        \"500\": 0,\n        \"1000\": 0.04,\n        \"2000\": 0.01,\n        \"4000\": 0.002\n    }\n]\n\nexport default RoomData;","import RoomData from './RoomData';\n\nconst RT60 = (volume, surfaceAbsorbtion) => {\n    return (0.161 * volume) / (surfaceAbsorbtion)\n}\n\nconst SurfaceAbsorption = (surfaces, frequency) => {\n    let A = 0;\n    surfaces.forEach(element => {\n        RoomData.forEach(roomElement => {\n            if(element.Material === roomElement.Material)\n            {\n                A += (parseInt(element.Area) * roomElement[frequency])\n            }\n        });\n    });\n    return A;\n}\n\nconst RoomAnalysis = (surfaces, volume) => {\n    let analysis = [];\n    Object.keys(RoomData[0]).forEach((frequency) => {\n        if(frequency !== \"Material\" && frequency !== \"tableData\") // Apparently material-tables appends data to the object...\n        {\n            analysis.push([parseInt(frequency), RT60(volume, SurfaceAbsorption(surfaces, frequency))]);\n        }\n    });\n    return analysis;\n}\n\nexport default RoomAnalysis;\n/* USEAGE\nlet testA = SurfaceAbsorption([[24, 0.05], [9, 0.02], [9, 0.14]]);\nconsole.log(RT60(18, testA));\n*/","import React from 'react';\nimport { Chart } from 'react-charts';\nimport PropTypes from 'prop-types';\nimport RoomSolver from '../utilities/RoomSolver';\n\nconst LineGraph = (props) => {\n\n    const data = React.useMemo(() => [\n        {\n            label: 'Initial Plot',\n            data: RoomSolver(props.plot.data, props.plot.volume)\n        }\n    ], [props]);\n\n    const axes = React.useMemo(() => [\n        { primary: true, type: 'log', position: 'bottom'}, \n        { type: 'linear', position: 'left' }\n    ], []);\n\n\n    return (\n        <div\n        style={{\n            width: '100%',\n            height: '300px'\n        }}\n        >\n            <Chart data={data} axes={axes} tooltip/>\n        </div>\n    );\n\n}\n\nLineGraph.propTypes = {\n    data: PropTypes.array.isRequired\n};\n\nexport default LineGraph;","import React, {useState, useEffect} from 'react';\nimport MaterialTable from 'material-table';\n\nconst RoomInputGrid = (props) => {\n    const [tableData, setTableData] = useState({\n        data: props.data,\n        resolve: () => {}\n    });\n\n    useEffect(() => {\n        tableData.resolve();\n        props.updatePlot(tableData.data);\n    }, [tableData]);\n\n    return (\n        <MaterialTable\n          options={{\n            search: false\n          }}\n          columns={[\n            { title: \"Material\", field: \"Material\" },\n            { title: \"Area (M^2)\", field: \"Area\", type: \"numeric\" },\n          ]}\n          data={tableData.data}\n          title=\"Room Construction\"\n          editable={{\n            onRowAdd: newData => { \n                return new Promise((resolve, reject) => {\n                    const { data } = tableData;\n                    data.push(newData);\n                    setTableData({data, resolve});\n                }); \n            },\n            onRowUpdate: (newData, oldData) => {\n                return new Promise((resolve, reject) => {\n                    const { data } = tableData;\n                    const index = data.indexOf(oldData);\n                    data[index] = newData;\n                    setTableData({data, resolve});\n                }); \n            },\n            onRowDelete: oldData => {\n                return new Promise((resolve, reject) => {\n                    const { data } = tableData;\n                    const index = data.indexOf(oldData);\n                    data.splice(index, 1);\n                    setTableData({data, resolve});\n                }); \n            }\n\n        }}\n        />\n    );\n};\n\nexport default RoomInputGrid;","import React from 'react';\nimport MaterialTable from 'material-table';\nimport RoomData from '../utilities/RoomData';\n\nconst MaterialsGrid = () => {\n\n    return ( <\n        MaterialTable options = {\n            {\n                search: true\n            }\n        }\n        columns = {\n            [{\n                    title: \"Material\",\n                    field: \"Material\"\n                },\n                {\n                    title: \"Abs 125Hz\",\n                    field: \"125\",\n                    type: \"numeric\"\n                },\n                {\n                    title: \"Abs 250Hz\",\n                    field: \"250\",\n                    type: \"numeric\"\n                },\n                {\n                    title: \"Abs 500Hz\",\n                    field: \"500\",\n                    type: \"numeric\"\n                },\n                {\n                    title: \"Abs 1kHz\",\n                    field: \"1000\",\n                    type: \"numeric\"\n                },\n                {\n                    title: \"Abs 2kHz\",\n                    field: \"2000\",\n                    type: \"numeric\"\n                },\n                {\n                    title: \"Abs 4kHz\",\n                    field: \"4000\",\n                    type: \"numeric\"\n                }\n            ]\n        }\n        data = {RoomData}\n        title = \"Room Materials Table\" /\n        >\n    );\n};\n\nexport default MaterialsGrid;","import React, {useState} from 'react';\nimport LineGraph  from './components/LineGraph';\nimport RoomInputGrid from './components/RoomInputGrid';\nimport MaterialGrid from './components/MaterialsGrid';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst App = () => {\n\n    const initialData = [\n        { Material: \"Brick\", Area: 24},\n        { Material: \"Concrete\", Area: 9},\n        { Material: \"Plaster\", Area: 9},\n    ];\n    \n    const [plotData, setPlot] = useState({data: initialData, volume: 18});\n\n    const UpdatePlot = (data) => {\n        setPlot({...plotData, data});\n    };\n\n    return (\n        <>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item xs={10} align=\"center\">\n                    <Paper>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            Instructions - Room Solver\n                        </Typography>\n                        <Typography component=\"p\">\n                            When adding to the room construction list ensure the material name matches the material name given in the \"Room Materials Table\".  \n                            Written by Leon P-S\n                        </Typography>\n                    </Paper>\n                </Grid>\n                <Grid item xs={10}>\n                    <MaterialGrid />\n                </Grid>\n                <Grid item xs={12} align=\"center\">\n                    <TextField\n                        id=\"standard-basic\"\n                        label=\"Volume (m^3)\"\n                        value={plotData.volume}\n                        onChange={(event) => {\n                            setPlot({...plotData, volume: event.target.value});\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={10}>\n                    <RoomInputGrid updatePlot={UpdatePlot} data={initialData}/>\n                </Grid>\n                <Grid item xs={10} align=\"center\">\n                    <LineGraph plot={plotData}/>\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}