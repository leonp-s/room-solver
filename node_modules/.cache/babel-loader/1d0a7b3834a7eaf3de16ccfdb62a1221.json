{"ast":null,"code":"import _defineProperty from \"/Users/LeonP-S/Documents/Development/Web/room-solver/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/LeonP-S/Documents/Development/Web/room-solver/src/components/RoomInputGrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nconst RoomInputGrid = () => {\n  const columns = [{\n    key: \"id\",\n    name: \"ID\",\n    editable: true\n  }, {\n    key: \"title\",\n    name: \"Title\",\n    editable: true\n  }, {\n    key: \"complete\",\n    name: \"Complete\",\n    editable: true\n  }];\n  const rows = [{\n    id: 0,\n    title: \"Task 1\",\n    complete: 20\n  }, {\n    id: 1,\n    title: \"Task 2\",\n    complete: 40\n  }, {\n    id: 2,\n    title: \"Task 3\",\n    complete: 60\n  }];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(ReactDataGrid, {\n    columns: columns,\n    rowGetter: i => rows[i],\n    rowsCount: 3,\n    minHeight: 150,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }));\n};\n\nexport default RoomInputGrid;\n\nclass Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rows\n    };\n\n    this.onGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = _objectSpread({}, rows[i], {}, updated);\n        }\n\n        return {\n          rows\n        };\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(ReactDataGrid, {\n      columns: columns,\n      rowGetter: i => this.state.rows[i],\n      rowsCount: 3,\n      onGridRowsUpdated: this.onGridRowsUpdated,\n      enableCellSelect: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/LeonP-S/Documents/Development/Web/room-solver/src/components/RoomInputGrid.js"],"names":["React","ReactDataGrid","RoomInputGrid","columns","key","name","editable","rows","id","title","complete","i","Example","Component","state","onGridRowsUpdated","fromRow","toRow","updated","setState","slice","render"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAExB,QAAMC,OAAO,GAAG,CACZ;AAAEC,IAAAA,GAAG,EAAE,IAAP;AAAaC,IAAAA,IAAI,EAAE,IAAnB;AAAyBC,IAAAA,QAAQ,EAAE;AAAnC,GADY,EAEZ;AAAEF,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,IAAI,EAAE,OAAtB;AAA+BC,IAAAA,QAAQ,EAAE;AAAzC,GAFY,EAGZ;AAAEF,IAAAA,GAAG,EAAE,UAAP;AAAmBC,IAAAA,IAAI,EAAE,UAAzB;AAAqCC,IAAAA,QAAQ,EAAE;AAA/C,GAHY,CAAhB;AAMA,QAAMC,IAAI,GAAG,CACT;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GADS,EAET;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAFS,EAGT;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,QAAhB;AAA0BC,IAAAA,QAAQ,EAAE;AAApC,GAHS,CAAb;AAMA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AACI,IAAA,OAAO,EAAEP,OADb;AAEI,IAAA,SAAS,EAAEQ,CAAC,IAAIJ,IAAI,CAACI,CAAD,CAFxB;AAGI,IAAA,SAAS,EAAE,CAHf;AAII,IAAA,SAAS,EAAE,GAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AASH,CAvBD;;AAyBA,eAAeT,aAAf;;AAEE,MAAMU,OAAN,SAAsBZ,KAAK,CAACa,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCC,KADoC,GAC5B;AAAEP,MAAAA;AAAF,KAD4B;;AAAA,SAGpCQ,iBAHoC,GAGhB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAD,KAAiC;AACnD,WAAKC,QAAL,CAAcL,KAAK,IAAI;AACrB,cAAMP,IAAI,GAAGO,KAAK,CAACP,IAAN,CAAWa,KAAX,EAAb;;AACA,aAAK,IAAIT,CAAC,GAAGK,OAAb,EAAsBL,CAAC,IAAIM,KAA3B,EAAkCN,CAAC,EAAnC,EAAuC;AACrCJ,UAAAA,IAAI,CAACI,CAAD,CAAJ,qBAAeJ,IAAI,CAACI,CAAD,CAAnB,MAA2BO,OAA3B;AACD;;AACD,eAAO;AAAEX,UAAAA;AAAF,SAAP;AACD,OAND;AAOD,KAXmC;AAAA;;AAYpCc,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,aAAD;AACE,MAAA,OAAO,EAAElB,OADX;AAEE,MAAA,SAAS,EAAEQ,CAAC,IAAI,KAAKG,KAAL,CAAWP,IAAX,CAAgBI,CAAhB,CAFlB;AAGE,MAAA,SAAS,EAAE,CAHb;AAIE,MAAA,iBAAiB,EAAE,KAAKI,iBAJ1B;AAKE,MAAA,gBAAgB,EAAE,IALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AAtBmC","sourcesContent":["import React from 'react';\nimport ReactDataGrid from 'react-data-grid';\n\nconst RoomInputGrid = () => {\n\n    const columns = [\n        { key: \"id\", name: \"ID\", editable: true },\n        { key: \"title\", name: \"Title\", editable: true },\n        { key: \"complete\", name: \"Complete\", editable: true }\n    ];\n      \n    const rows = [\n        { id: 0, title: \"Task 1\", complete: 20 },\n        { id: 1, title: \"Task 2\", complete: 40 },\n        { id: 2, title: \"Task 3\", complete: 60 }\n    ];\n\n    return (\n        <div>\n            <ReactDataGrid\n                columns={columns}\n                rowGetter={i => rows[i]}\n                rowsCount={3}\n                minHeight={150} />\n        </div>\n    );\n};\n\nexport default RoomInputGrid;\n  \n  class Example extends React.Component {\n    state = { rows };\n  \n    onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n      this.setState(state => {\n        const rows = state.rows.slice();\n        for (let i = fromRow; i <= toRow; i++) {\n          rows[i] = { ...rows[i], ...updated };\n        }\n        return { rows };\n      });\n    };\n    render() {\n      return (\n        <ReactDataGrid\n          columns={columns}\n          rowGetter={i => this.state.rows[i]}\n          rowsCount={3}\n          onGridRowsUpdated={this.onGridRowsUpdated}\n          enableCellSelect={true}\n        />\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}