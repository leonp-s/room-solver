{"ast":null,"code":"import _slicedToArray from \"/Users/LeonP-S/Documents/Development/Web/room-solver/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/LeonP-S/Documents/Development/Web/room-solver/src/components/RoomInputGrid.js\";\nimport React, { useState, useEffect } from 'react';\nimport MaterialTable from 'material-table';\n\nconst RoomInputGrid = () => {\n  const _useState = useState({\n    data: [{\n      Material: \"Concrete\",\n      Area: 22\n    }],\n    resolve: () => {}\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        tableData = _useState2[0],\n        setTableData = _useState2[1];\n\n  useEffect(() => {\n    tableData.resolve();\n  }, [tableData]);\n  return React.createElement(MaterialTable, {\n    options: {\n      search: false\n    },\n    columns: [{\n      title: \"Material\",\n      field: \"Material\"\n    }, {\n      title: \"Area (M^2)\",\n      field: \"Area\",\n      type: \"numeric\"\n    }],\n    data: tableData.data,\n    title: \"Room Construction\",\n    editable: {\n      onRowAdd: newData => {\n        return new Promise((resolve, reject) => {\n          const data = tableData.data;\n          data.push(newData);\n          setTableData({\n            data,\n            resolve\n          });\n        });\n      },\n      onRowUpdate: (newData, oldData) => {\n        return new Promise((resolve, reject) => {\n          const data = tableData.data;\n          const index = data.indexOf(oldData);\n          data[index] = newData;\n          setTableData({\n            data,\n            resolve\n          });\n        });\n      },\n      onRowDelete: oldData => {\n        return new Promise((resolve, reject) => {\n          const data = tableData.data;\n          const index = data.indexOf(oldData);\n          data.splice(index, 1);\n          setTableData({\n            data,\n            resolve\n          });\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  });\n};\n\nexport default RoomInputGrid;","map":{"version":3,"sources":["/Users/LeonP-S/Documents/Development/Web/room-solver/src/components/RoomInputGrid.js"],"names":["React","useState","useEffect","MaterialTable","RoomInputGrid","data","Material","Area","resolve","tableData","setTableData","search","title","field","type","onRowAdd","newData","Promise","reject","push","onRowUpdate","oldData","index","indexOf","onRowDelete","splice"],"mappings":";;AAAA,OAAOA,KAAP,IACIC,QADJ,EAEIC,SAFJ,QAGO,OAHP;AAIA,OAAOC,aAAP,MAA0B,gBAA1B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA,oBACUH,QAAQ,CAAC;AACvCI,IAAAA,IAAI,EAAE,CAAC;AACHC,MAAAA,QAAQ,EAAE,UADP;AAEHC,MAAAA,IAAI,EAAE;AAFH,KAAD,CADiC;AAKvCC,IAAAA,OAAO,EAAE,MAAM,CAAE;AALsB,GAAD,CADlB;AAAA;AAAA,QACjBC,SADiB;AAAA,QACNC,YADM;;AASxBR,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS,CAACD,OAAV;AACH,GAFQ,EAEN,CAACC,SAAD,CAFM,CAAT;AAIA,SAAS,oBACL,aADK;AACS,IAAA,OAAO,EACjB;AACIE,MAAAA,MAAM,EAAE;AADZ,KAFC;AAML,IAAA,OAAO,EACH,CAAC;AACOC,MAAAA,KAAK,EAAE,UADd;AAEOC,MAAAA,KAAK,EAAE;AAFd,KAAD,EAII;AACID,MAAAA,KAAK,EAAE,YADX;AAEIC,MAAAA,KAAK,EAAE,MAFX;AAGIC,MAAAA,IAAI,EAAE;AAHV,KAJJ,CAPC;AAkBL,IAAA,IAAI,EACAL,SAAS,CAACJ,IAnBT;AAqBL,IAAA,KAAK,EAAG,mBArBH;AAsBL,IAAA,QAAQ,EACJ;AACIU,MAAAA,QAAQ,EAAEC,OAAO,IAAI;AACjB,eAAO,IAAIC,OAAJ,CAAY,CAACT,OAAD,EAAUU,MAAV,KAAqB;AAAA,gBAEhCb,IAFgC,GAGhCI,SAHgC,CAEhCJ,IAFgC;AAIpCA,UAAAA,IAAI,CAACc,IAAL,CAAUH,OAAV;AACAN,UAAAA,YAAY,CAAC;AACTL,YAAAA,IADS;AAETG,YAAAA;AAFS,WAAD,CAAZ;AAIH,SATM,CAAP;AAUH,OAZL;AAaIY,MAAAA,WAAW,EAAE,CAACJ,OAAD,EAAUK,OAAV,KAAsB;AAC/B,eAAO,IAAIJ,OAAJ,CAAY,CAACT,OAAD,EAAUU,MAAV,KAAqB;AAAA,gBAEhCb,IAFgC,GAGhCI,SAHgC,CAEhCJ,IAFgC;AAIpC,gBAAMiB,KAAK,GAAGjB,IAAI,CAACkB,OAAL,CAAaF,OAAb,CAAd;AACAhB,UAAAA,IAAI,CAACiB,KAAD,CAAJ,GAAcN,OAAd;AACAN,UAAAA,YAAY,CAAC;AACTL,YAAAA,IADS;AAETG,YAAAA;AAFS,WAAD,CAAZ;AAIH,SAVM,CAAP;AAWH,OAzBL;AA0BIgB,MAAAA,WAAW,EAAEH,OAAO,IAAI;AACpB,eAAO,IAAIJ,OAAJ,CAAY,CAACT,OAAD,EAAUU,MAAV,KAAqB;AAAA,gBAEhCb,IAFgC,GAGhCI,SAHgC,CAEhCJ,IAFgC;AAIpC,gBAAMiB,KAAK,GAAGjB,IAAI,CAACkB,OAAL,CAAaF,OAAb,CAAd;AACAhB,UAAAA,IAAI,CAACoB,MAAL,CAAYH,KAAZ,EAAmB,CAAnB;AACAZ,UAAAA,YAAY,CAAC;AACTL,YAAAA,IADS;AAETG,YAAAA;AAFS,WAAD,CAAZ;AAIH,SAVM,CAAP;AAWH;AAtCL,KAvBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAT;AAmEH,CAhFD;;AAkFA,eAAeJ,aAAf","sourcesContent":["import React, {\n    useState,\n    useEffect\n} from 'react';\nimport MaterialTable from 'material-table';\n\nconst RoomInputGrid = () => {\n    const [tableData, setTableData] = useState({\n        data: [{\n            Material: \"Concrete\",\n            Area: 22\n        }],\n        resolve: () => {}\n    });\n\n    useEffect(() => {\n        tableData.resolve();\n    }, [tableData]);\n\n    return ( <\n        MaterialTable options = {\n            {\n                search: false\n            }\n        }\n        columns = {\n            [{\n                    title: \"Material\",\n                    field: \"Material\"\n                },\n                {\n                    title: \"Area (M^2)\",\n                    field: \"Area\",\n                    type: \"numeric\"\n                },\n            ]\n        }\n        data = {\n            tableData.data\n        }\n        title = \"Room Construction\"\n        editable = {\n            {\n                onRowAdd: newData => {\n                    return new Promise((resolve, reject) => {\n                        const {\n                            data\n                        } = tableData;\n                        data.push(newData);\n                        setTableData({\n                            data,\n                            resolve\n                        });\n                    });\n                },\n                onRowUpdate: (newData, oldData) => {\n                    return new Promise((resolve, reject) => {\n                        const {\n                            data\n                        } = tableData;\n                        const index = data.indexOf(oldData);\n                        data[index] = newData;\n                        setTableData({\n                            data,\n                            resolve\n                        });\n                    });\n                },\n                onRowDelete: oldData => {\n                    return new Promise((resolve, reject) => {\n                        const {\n                            data\n                        } = tableData;\n                        const index = data.indexOf(oldData);\n                        data.splice(index, 1);\n                        setTableData({\n                            data,\n                            resolve\n                        });\n                    });\n                }\n\n            }\n        }\n        />\n    );\n};\n\nexport default RoomInputGrid;"]},"metadata":{},"sourceType":"module"}