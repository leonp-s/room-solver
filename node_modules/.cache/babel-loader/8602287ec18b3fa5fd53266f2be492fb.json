{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar React = require('react');\n\nvar getEditorByType = require('./editors/getEditorByType');\n\nvar simpleGet = function simpleGet(key) {\n  return function (data) {\n    return data[key];\n  };\n};\n\nvar keyGetter = function keyGetter(keys) {\n  return function (data) {\n    return keys.map(function (key) {\n      return data[key];\n    });\n  };\n};\n\nvar isEmpty = function isEmpty(value) {\n  return value === undefined || value === null || value === '';\n};\n\nvar _ = require('lodash');\n\nvar getCellValue = function getCellValue(_ref, row) {\n  var prop = _ref.prop,\n      defaultContent = _ref.defaultContent,\n      render = _ref.render;\n  return (// Return `defaultContent` if the value is empty.\n    !isEmpty(prop) && isEmpty(row[prop]) ? defaultContent : // Use the render function for the value.\n    render ? render(row[prop], row) : // Otherwise just return the value.\n    row[prop]\n  );\n};\n\nvar getCellClass = function getCellClass(_ref2, row) {\n  var prop = _ref2.prop,\n      className = _ref2.className;\n  return !isEmpty(prop) && isEmpty(row[prop]) ? 'empty-cell' : typeof className === 'function' ? className(row[prop], row) : className;\n};\n\nfunction buildSortProps(col, sortBy, onSort) {\n  var order = sortBy.prop === col.prop ? sortBy.order : 'none';\n  var nextOrder = order === 'ascending' ? 'descending' : 'ascending';\n  var sortEvent = onSort.bind(null, {\n    prop: col.prop,\n    order: nextOrder\n  });\n  return {\n    'onClick': sortEvent,\n    // Fire the sort event on enter.\n    'onKeyDown': function onKeyDown(e) {\n      if (e.keyCode === 13) sortEvent();\n    },\n    // Prevents selection with mouse.\n    'onMouseDown': function onMouseDown(e) {\n      return e.preventDefault();\n    },\n    'tabIndex': 0,\n    'aria-sort': order,\n    'aria-label': col.title + ': activate to sort column ' + nextOrder\n  };\n}\n\nvar Cell = React.createClass({\n  displayName: 'Cell',\n  getInitialState: function getInitialState() {\n    return {\n      edit: false,\n      focused: false\n    };\n  },\n  handleChange: function handleChange(value) {\n    var _props = this.props,\n        col = _props.col,\n        row = _props.row;\n    this.props.onChange(col, row, value);\n    this.state.focused = false;\n  },\n  handleCancel: function handleCancel() {\n    this.state.edit = false;\n    this.state.focused = false;\n    this.setState(this.state);\n  },\n  handleCellClick: function handleCellClick() {\n    this.state.edit = true;\n    this.setState(this.state);\n  },\n  handleKeyUp: function handleKeyUp(ev) {\n    if (ev.keyCode === 13 && this.state.focused) {\n      this.state.edit = true;\n      this.setState(this.state);\n    }\n  },\n  handleFocus: function handleFocus() {\n    this.state.focused = true;\n    this.setState(this.state);\n  },\n  handleBlur: function handleBlur() {\n    this.state.focused = false;\n    this.setState(this.state);\n  },\n  render: function render() {\n    var _props2 = this.props,\n        col = _props2.col,\n        row = _props2.row;\n    var Editor = getEditorByType(col.editor.type);\n    return React.createElement('td', {\n      tabIndex: 0,\n      className: getCellClass(col, row),\n      onClick: this.handleCellClick,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onKeyUp: this.handleKeyUp\n    }, !this.state.edit ? getCellValue(col, row) : React.createElement(Editor, {\n      editor: col.editor,\n      value: row[col.prop],\n      col: col,\n      row: row,\n      onChange: this.handleChange,\n      onCancel: this.handleCancel\n    }));\n  }\n});\nvar Table = React.createClass({\n  displayName: 'Table',\n  propTypes: {\n    keys: React.PropTypes.oneOfType([React.PropTypes.arrayOf(React.PropTypes.string), React.PropTypes.string]).isRequired,\n    columns: React.PropTypes.arrayOf(React.PropTypes.shape({\n      title: React.PropTypes.string.isRequired,\n      prop: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n      render: React.PropTypes.func,\n      sortable: React.PropTypes.bool,\n      defaultContent: React.PropTypes.string,\n      width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n      className: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func])\n    })).isRequired,\n    dataArray: React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object])).isRequired,\n    buildRowOpts: React.PropTypes.func,\n    sortBy: React.PropTypes.shape({\n      prop: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),\n      order: React.PropTypes.oneOf(['ascending', 'descending'])\n    }),\n    onSort: React.PropTypes.func,\n    onChange: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      buildRowOpts: function buildRowOpts() {\n        return {};\n      },\n      sortBy: {}\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    // If no width was specified, then set the width that the browser applied\n    // initially to avoid recalculating width between pages.\n    for (var i = 0; i < this.props.columns.length; i++) {\n      var thDom = this.refs['th-' + i].getDOMNode();\n\n      if (!thDom.style.width) {\n        thDom.style.width = thDom.offsetWidth + 'px';\n      }\n    }\n  },\n  setError: function setError(target) {\n    target.classList.add('error');\n  },\n  handleCellClick: function handleCellClick(col, row, ev) {\n    ev.target.classList.remove('empty-cell');\n    var Editor = getEditorByType(col.editor.type);\n    React.render(React.createElement(Editor, {\n      editor: col.editor,\n      value: row[col.prop],\n      col: col,\n      row: row,\n      target: ev.target,\n      onChange: this.handleChange,\n      onCancel: this.handleCancel\n    }), ev.target);\n  },\n  handleChange: function handleChange(col, row, val) {\n    if (col.hasOwnProperty('validation')) {\n      if (col.validation.test(val)) {\n        target.classList.remove('error');\n        this.props.onChange(col, row, val);\n      } else {\n        this.setError(target);\n      }\n    } else {\n      this.props.onChange(col, row, val);\n    }\n  },\n  handleDelete: function handleDelete() {\n    this.props.onDelete();\n  },\n  handleAdd: function handleAdd() {\n    this.props.onAdd();\n  },\n  handleCheck: function handleCheck(row, ev) {\n    this.props.onChange({\n      prop: 'checked'\n    }, row, ev.target.checked);\n  },\n  handleCheckAll: function handleCheckAll(ev) {\n    this.props.onToggleCheckAll(ev.target.checked);\n  },\n  isCheckedAll: function isCheckedAll() {\n    return _.every(this.props.dataArray, {\n      checked: true\n    });\n  },\n  render: function render() {\n    var _this = this;\n\n    var _props3 = this.props,\n        columns = _props3.columns,\n        keys = _props3.keys,\n        buildRowOpts = _props3.buildRowOpts,\n        sortBy = _props3.sortBy,\n        onSort = _props3.onSort;\n    var headers = columns.map(function (col, idx) {\n      var sortProps, order; // Only add sorting events if the column has a property and is sortable.\n\n      if (col.sortable !== false && 'prop' in col) {\n        sortProps = buildSortProps(col, sortBy, onSort);\n        order = sortProps['aria-sort'];\n      }\n\n      return React.createElement('th', _extends({\n        ref: 'th-' + idx,\n        key: idx,\n        style: {\n          width: col.width\n        },\n        role: 'columnheader',\n        scope: 'col'\n      }, sortProps), React.createElement('span', null, col.title), typeof order !== 'undefined' ? React.createElement('span', {\n        className: 'sort-icon sort-' + order,\n        'aria-hidden': 'true'\n      }) : null);\n    });\n    var getKeys = Array.isArray(keys) ? keyGetter(keys) : simpleGet(keys);\n    var rows = this.props.dataArray.map(function (row, r) {\n      return React.createElement('tr', _extends({\n        key: _.uniqueId()\n      }, buildRowOpts(row), {\n        className: 'data-tr'\n      }), React.createElement('td', {\n        key: r,\n        className: 'checkbox-td'\n      }, React.createElement('div', {\n        className: 'checkbox-container'\n      }, React.createElement('input', {\n        id: 'check' + r,\n        className: 'checkbox',\n        type: 'checkbox',\n        checked: row.checked,\n        onChange: _this.handleCheck.bind(_this, row)\n      }), React.createElement('label', {\n        htmlFor: 'check' + r\n      }))), columns.map(function (col, i) {\n        var edit = col.hasOwnProperty('editable') ? col.editable : true;\n        return edit ? React.createElement(Cell, {\n          key: i,\n          ref: i + getCellValue(col, row),\n          className: getCellClass(col, row),\n          col: col,\n          row: row,\n          onChange: _this.handleChange\n        }) : React.createElement('td', {\n          key: i,\n          ref: i + getCellValue(col, row),\n          className: getCellClass(col, row)\n        }, getCellValue(col, row));\n      }));\n    });\n    var style = {\n      position: 'absolute',\n      width: 'calc(100% + 40px)',\n      height: '100%',\n      left: '-40px'\n    };\n    return React.createElement('div', null, React.createElement('div', {\n      className: 'table-controls'\n    }, React.createElement('button', {\n      className: 'btn btn-primary btn-sm opt-btn',\n      onClick: this.handleAdd\n    }, '+'), React.createElement('button', {\n      className: 'btn btn-danger btn-sm opt-btn',\n      onClick: this.handleDelete\n    }, '-')), React.createElement('table', {\n      className: this.props.className\n    }, React.createElement('caption', {\n      className: 'sr-only',\n      role: 'alert',\n      'aria-live': 'polite'\n    }, 'Sorted by ' + sortBy.prop + ': ' + sortBy.order + ' order'), React.createElement('thead', null, React.createElement('tr', null, React.createElement('th', {\n      className: 'checkbox-th'\n    }, React.createElement('div', {\n      className: 'checkbox-container'\n    }, React.createElement('input', {\n      id: 'check-all',\n      className: 'checkbox',\n      type: 'checkbox',\n      checked: this.isCheckedAll(),\n      onChange: this.handleCheckAll\n    }), React.createElement('label', {\n      htmlFor: 'check-all'\n    }))), headers)), React.createElement('tbody', null, rows.length > 0 ? rows : React.createElement('tr', null, React.createElement('td', {\n      colSpan: columns.length + 1,\n      className: 'text-center'\n    }, 'No data')))));\n  }\n});\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}