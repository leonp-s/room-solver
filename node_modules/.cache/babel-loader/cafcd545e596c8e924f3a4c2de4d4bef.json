{"ast":null,"code":"'use strict';\n\nvar _require = require('./utils'),\n    sort = _require.sort,\n    filter = _require.filter;\n\nvar _ = require('lodash');\n\nvar containsIgnoreCase = function containsIgnoreCase(a, b) {\n  a = (a + '').toLowerCase().trim();\n  b = (b + '').toLowerCase().trim();\n  return b.indexOf(a) >= 0;\n};\n\nfunction setUKeys(data) {\n  return _.cloneDeep(data).map(function (item) {\n    item.ukey = _.uniqueId();\n    return item;\n  });\n}\n\nfunction removeUKeys(data) {\n  return _.cloneDeep(data).map(function (item) {\n    delete item.ukey; // TODO: checked\n\n    delete item.checked;\n    return item;\n  });\n}\n\nmodule.exports = {\n  getInitialState: function getInitialState() {\n    // var data = this.convertFromArray(this.props.initialData);\n    var itemKeys = this.props.columns.map(function (item) {\n      return item.prop;\n    });\n    var data = setUKeys(this.props.initialData);\n    return {\n      // Clone the initialData.\n      data: data,\n      initialData: data,\n      stateCache: data,\n      sortBy: this.props.initialSortBy,\n      filterValues: {},\n      currentPage: 0,\n      itemKeys: itemKeys,\n      pageLength: this.props.initialPageLength\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      initialPageLength: 10,\n      pageLengthOptions: [5, 10, 20],\n      filters: {\n        globalSearch: {\n          filter: containsIgnoreCase\n        }\n      }\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    // Do the initial sorting if specified.\n    var _state = this.state,\n        sortBy = _state.sortBy,\n        data = _state.data;\n\n    if (sortBy) {\n      this.setState({\n        data: sort(sortBy, data)\n      });\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var _state2 = this.state,\n        filterValues = _state2.filterValues,\n        sortBy = _state2.sortBy;\n    var initialData = nextProps.initialData,\n        filters = nextProps.filters; // var newInitialData = this.convertFromArray(initialData);\n\n    var newInitialData = setUKeys(initialData);\n\n    if (this.state.filterValues.globalSearch) {\n      var newData = filter.call(this, filters, filterValues, newInitialData); // newData = sort(sortBy, newData);\n\n      this.setState({\n        data: newData,\n        stateCache: newInitialData,\n        filterValues: filterValues\n      });\n    } else {\n      this.setState({\n        data: newInitialData,\n        initialData: newInitialData,\n        stateCache: newInitialData,\n        // currentPage: 0,\n        filterValues: {\n          globalSearch: ''\n        }\n      });\n    }\n  },\n  onSort: function onSort(sortBy, type) {\n    this.setState({\n      sortBy: sortBy,\n      data: sort(sortBy, this.state.data, type)\n    });\n  },\n  onFilter: function onFilter(filterName, filterValue) {\n    var _state3 = this.state,\n        filterValues = _state3.filterValues,\n        sortBy = _state3.sortBy,\n        data = _state3.data;\n    var _props = this.props,\n        initialData = _props.initialData,\n        filters = _props.filters,\n        columns = _props.columns;\n\n    var type = _.find(columns, {\n      'prop': sortBy.prop\n    }).type; // var newInitialData = this.convertFromArray(initialData);\n\n\n    filterValues[filterName] = filterValue;\n    var newData = filter.call(this, filters, filterValues, initialData); // newData = sort(sortBy, newData, type);\n    // console.log(\"OnFilter\", newData, \"Cache\", data.slice(0));\n\n    this.setState({\n      data: newData,\n      stateCache: initialData.slice(0),\n      filterValues: filterValues,\n      currentPage: 0\n    });\n  },\n  handleChange: function handleChange(col, row, val) {\n    var index = _.findIndex(this.state.stateCache, function (item) {\n      return item.ukey == row.ukey;\n    });\n\n    var prop = col.prop;\n    row[prop] = val;\n\n    if (index !== -1) {\n      this.state.stateCache.splice(index, 1, row);\n    } // const data = _.merge(this.props.initialData, this.state.data);\n\n\n    if (prop !== \"checked\") {\n      var data = removeUKeys(_.cloneDeep(this.state.stateCache));\n      this.props.onChange(data);\n    } else {} // _.find(this.state.data, ['active', false]);\n\n    /*this.setState({\r\n      // data: this.state.stateCache,\r\n      stateCache: this.state.stateCache.slice(0),\r\n    }); */\n    // this.props.onChange(_.union(this.state.data, this.convertFromArray(this.props.initialData)));\n    //console.log(\"onChange\", col, row, val, this.convertToArray(this.state.data));\n    //this.props.onChange(this.convertToArray(this.state.data));\n    // this.props.onChange(_.union(this.convertToArray(this.state.data), this.props.initialData));\n\n  },\n  handleToggleCheckAll: function handleToggleCheckAll(flag) {\n    // console.log('check all', this.state.data);\n    // console.log(this.buildPage());\n    this.buildPage().data.forEach(function (item) {\n      item.checked = !!flag;\n      return item;\n    });\n    this.setState(this.state.data);\n  },\n  handleDelete: function handleDelete() {\n    _.remove(this.state.data, function (item) {\n      return item.checked;\n    });\n\n    _.remove(this.state.stateCache, function (item) {\n      return item.checked;\n    });\n\n    this.props.onChange(removeUKeys(this.state.stateCache));\n  },\n  handleAdd: function handleAdd() {\n    var _this = this;\n\n    var _$clone = _.clone(this.state),\n        initialData = _$clone.initialData;\n\n    var newObj = {\n      ukey: Date.now()\n    };\n    this.state.itemKeys.forEach(function (key) {\n      var col = _.find(_this.props.columns, function (item) {\n        return item.prop === key;\n      });\n\n      newObj[key] = col.defaultValue || '';\n    });\n    initialData.unshift(newObj);\n    this.setState({\n      data: initialData,\n      filterValues: {\n        globalSearch: ''\n      }\n    }); // this.props.onChange(removeUKeys(initialData));\n  },\n  // Pagination\n  buildPage: function buildPage() {\n    var _state4 = this.state,\n        data = _state4.data,\n        currentPage = _state4.currentPage,\n        pageLength = _state4.pageLength;\n    var start = pageLength * currentPage;\n    return {\n      data: data.slice(start, start + pageLength),\n      currentPage: currentPage,\n      totalPages: Math.ceil(data.length / pageLength)\n    };\n  },\n  onChangePage: function onChangePage(pageNumber) {\n    this.setState({\n      currentPage: pageNumber\n    });\n  },\n  onPageLengthChange: function onPageLengthChange(value) {\n    var newPageLength = +value;\n    var _state5 = this.state,\n        currentPage = _state5.currentPage,\n        pageLength = _state5.pageLength;\n    var newPage = Math.floor(currentPage * pageLength / newPageLength);\n    this.setState({\n      pageLength: newPageLength,\n      currentPage: newPage\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}