{"ast":null,"code":"import RoomData from './RoomData';\n\nconst RT60 = (volume, surfaceAbsorbtion) => {\n  return 0.161 * volume / surfaceAbsorbtion;\n};\n\nconst SurfaceAbsorption = (surfaces, frequency) => {\n  let A = 0;\n  surfaces.forEach(element => {\n    RoomData.forEach(roomElement => {\n      if (element.Material === roomElement.Material) {\n        A += element.Area * roomElement[frequency];\n      }\n    });\n  });\n  return A;\n};\n\nconst RoomAnalysis = (surfaces, volume) => {\n  let analysis = [];\n\n  for (let frequency in RoomData) {\n    if (frequency !== \"Material\") {\n      analysis.push([]);\n    }\n  }\n};\n/* USEAGE\nlet testA = SurfaceAbsorption([[24, 0.05], [9, 0.02], [9, 0.14]]);\nconsole.log(RT60(18, testA));\n*/","map":{"version":3,"sources":["/Users/LeonP-S/Documents/Development/Web/room-solver/src/utilities/RoomSolver.js"],"names":["RoomData","RT60","volume","surfaceAbsorbtion","SurfaceAbsorption","surfaces","frequency","A","forEach","element","roomElement","Material","Area","RoomAnalysis","analysis","push"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;;AAEA,MAAMC,IAAI,GAAG,CAACC,MAAD,EAASC,iBAAT,KAA+B;AACxC,SAAQ,QAAQD,MAAT,GAAoBC,iBAA3B;AACH,CAFD;;AAIA,MAAMC,iBAAiB,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AAC/C,MAAIC,CAAC,GAAG,CAAR;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAO,IAAI;AACxBT,IAAAA,QAAQ,CAACQ,OAAT,CAAiBE,WAAW,IAAI;AAC5B,UAAGD,OAAO,CAACE,QAAR,KAAqBD,WAAW,CAACC,QAApC,EACA;AACIJ,QAAAA,CAAC,IAAKE,OAAO,CAACG,IAAR,GAAeF,WAAW,CAACJ,SAAD,CAAhC;AACH;AACJ,KALD;AAMH,GAPD;AAQA,SAAOC,CAAP;AACH,CAXD;;AAaA,MAAMM,YAAY,GAAG,CAACR,QAAD,EAAWH,MAAX,KAAsB;AACvC,MAAIY,QAAQ,GAAG,EAAf;;AACA,OAAI,IAAIR,SAAR,IAAqBN,QAArB,EACA;AACI,QAAGM,SAAS,KAAK,UAAjB,EACA;AACIQ,MAAAA,QAAQ,CAACC,IAAT,CAAc,EAAd;AACH;AACJ;AACJ,CATD;AAWA","sourcesContent":["import RoomData from './RoomData';\n\nconst RT60 = (volume, surfaceAbsorbtion) => {\n    return (0.161 * volume) / (surfaceAbsorbtion)\n}\n\nconst SurfaceAbsorption = (surfaces, frequency) => {\n    let A = 0;\n    surfaces.forEach(element => {\n        RoomData.forEach(roomElement => {\n            if(element.Material === roomElement.Material)\n            {\n                A += (element.Area * roomElement[frequency])\n            }\n        });\n    });\n    return A;\n}\n\nconst RoomAnalysis = (surfaces, volume) => {\n    let analysis = [];\n    for(let frequency in RoomData)\n    {\n        if(frequency !== \"Material\")\n        {\n            analysis.push([]);\n        }\n    }\n}\n\n/* USEAGE\nlet testA = SurfaceAbsorption([[24, 0.05], [9, 0.02], [9, 0.14]]);\nconsole.log(RT60(18, testA));\n*/"]},"metadata":{},"sourceType":"module"}