{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n/**\r\n * Determines if at least one element in the object matches a truth test.\r\n *\r\n * @param {function(val, key)} pred Predicate function.\r\n * @param {object|array} obj\r\n * @return {boolean}\r\n */\n\n\nfunction some(pred, obj) {\n  var val;\n\n  for (var key in obj) {\n    if (~this.props.keys.indexOf(key)) {\n      continue;\n    }\n\n    if (React.isValidElement(obj[key])) {\n      val = obj[key].props.sortValue ? obj[key].props.sortValue.toLocaleLowerCase() : '';\n\n      if (pred(val, key) === true) {\n        return true;\n      }\n    }\n\n    if (pred(obj[key], key) === true) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Creates a compare function with a property to sort on.\r\n *\r\n * @param {string} prop Property to sort.\r\n * @return {function(object, object)} Compare function.\r\n */\n\n\nvar sortByFn = function sortByFn(prop) {\n  return function (a, b) {\n    return a[prop] < b[prop] ? -1 : a[prop] > b[prop] ? 1 : 0;\n  };\n};\n/**\r\n * Creates a compare function with a number property to sort on.\r\n *\r\n * @param {string} prop Property to sort.\r\n * @return {function(object, object)} Compare function.\r\n */\n\n\nvar sortByNumberFn = function sortByNumberFn(prop) {\n  return function (a, b) {\n    var aVal = a[prop] ? parseFloat(a[prop].replace(/[\\s\\$%,]/gm, ''), 10) : -Infinity,\n        bVal = b[prop] ? parseFloat(b[prop].replace(/[\\s\\$%,]/gm, ''), 10) : -Infinity;\n    return aVal - bVal;\n  };\n};\n/**\r\n * Creates a compare function with a string property of ReactElement to sort on.\r\n *\r\n * @param {string} prop Property to sort.\r\n * @return {function(object, object)} Compare function.\r\n */\n\n\nvar sortByElementStringFn = function sortByElementStringFn(prop) {\n  return function (a, b) {\n    var aVal = a[prop].props.sortValue ? a[prop].props.sortValue.toLowerCase() : '',\n        bVal = b[prop].props.sortValue ? b[prop].props.sortValue.toLowerCase() : '';\n    return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n  };\n};\n/**\r\n * Creates a compare function with a number property of ReactElement to sort on.\r\n *\r\n * @param {string} prop Property to sort.\r\n * @return {function(object, object)} Compare function.\r\n */\n\n\nvar sortByElementNumberFn = function sortByElementNumberFn(prop) {\n  return function (a, b) {\n    var aVal = a[prop].props.sortValue ? parseFloat(a[prop].props.sortValue.replace(/[\\s\\$%,]/gm, ''), 10) : -Infinity,\n        bVal = b[prop].props.sortValue ? parseFloat(b[prop].props.sortValue.replace(/[\\s\\$%,]/gm, ''), 10) : -Infinity;\n    return aVal - bVal;\n  };\n};\n/**\r\n * @param {object} sortBy Object containing `prop` and `order`.\r\n * @param {array} data Array to sort.\r\n * @param {string} type Field type.\r\n * @return {array} Sorted array.\r\n */\n\n\nfunction sort(sortBy, data, type) {\n  var sortedData;\n\n  if (data.length === 0) {\n    return [];\n  }\n\n  switch (type) {\n    case 'ELEMENT_NUMBER':\n      sortedData = data.sort(sortByElementNumberFn(sortBy.prop));\n      break;\n\n    case 'ELEMENT_STRING':\n      sortedData = data.sort(sortByElementStringFn(sortBy.prop));\n      break;\n\n    case 'NUMBER':\n      sortedData = data.sort(sortByNumberFn(sortBy.prop));\n      break;\n\n    case 'STRING':\n      sortedData = data.sort(sortByFn(sortBy.prop));\n      break;\n\n    default:\n      sortedData = data.sort(sortByFn(sortBy.prop));\n      break;\n  }\n\n  if (sortBy.order === 'descending') {\n    sortedData.reverse();\n  }\n\n  return sortedData;\n}\n/**\r\n * @param {!object} filters\r\n * @param {!array} data\r\n * @return {function(*, string)} Function to be executed for each entry in data.\r\n */\n\n\nfunction filterPass(filters, data) {\n  var _this = this;\n\n  return function (filterValue, key) {\n    var filterDef = filters[key];\n    var partial = filterDef.filter.bind(null, filterValue);\n\n    if (!filterDef.prop) {\n      // Filter is for all properties\n      return some.call(_this, function (each) {\n        return partial(each);\n      }, data);\n    } else {\n      // Filter is for one property\n      return partial(data[filterDef.prop]);\n    }\n  };\n}\n/**\r\n * Example of filter and filterValues.\r\n * filters = { globalSearch: { filter: containsIgnoreCase } }\r\n * filterValues = { globalSearch: 'filter value' }\r\n *\r\n * @param {object} filters Definition of the filters.\r\n * @param {object} filterValues Values of the filters.\r\n * @param {array} data Array to filter.\r\n * @return {array} Filtered array.\r\n */\n\n\nfunction filter(filters, filterValues, data) {\n  var _this2 = this;\n\n  var filterFunc = filterPass.bind(this, filters);\n  return data.filter(function (each) {\n    return some.call(_this2, filterFunc(each), filterValues);\n  });\n}\n\nmodule.exports = {\n  filter: filter,\n  filterPass: filterPass,\n  sort: sort,\n  sortByFunc: sortByFn,\n  some: some\n};","map":null,"metadata":{},"sourceType":"script"}